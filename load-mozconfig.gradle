/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

import groovy.json.JsonSlurper

def log(message) {
    logger.lifecycle("[load-mozconfig] ${message}")
}

/**
 * Loads the mozconfig and returns any variables derived from it, avoiding side effects.
 *
 * This method is relatively slow because it calls mach, which starts a python interpreter, will
 * becomes very slow if called for numerous subprojects. Therefore, it should only be called once
 * per build.
 */
ext.mozconfig = {
    apply from: "${topsrcdir}/mobile/android/gradle/mach_env.gradle"

    // Cribbed from https://hg.mozilla.org/mozilla-central/file/tip/settings.gradle.  When run in
    // topobjdir, `mach environment` correctly finds the mozconfig corresponding to that object
    // directory.
    def commandLine = ["${topsrcdir}/mach", "environment", "--format", "json", "--verbose"]
    def proc = commandLine.execute(
            machEnv(topsrcdir),
            new File(ext.has('topobjdir') ? ext.get('topobjdir') : topsrcdir))
    def standardOutput = new ByteArrayOutputStream()
    def standardError = new ByteArrayOutputStream()
    proc.consumeProcessOutput(standardOutput, standardError)
    proc.waitFor()

    // Only show the output if something went wrong.
    if (proc.exitValue() != 0) {
        throw new GradleException("Process '${commandLine}' finished with non-zero exit value ${proc.exitValue()}:\n\n"
                + "stdout:\n${standardOutput.toString()}\n\n"
                + "stderr:\n${standardError.toString()}")
    }

    def slurper = new JsonSlurper()
    def mozconfig = slurper.parseText(standardOutput.toString())

    if (topsrcdir != mozconfig.topsrcdir) {
        throw new GradleException("Specified topsrcdir ('${topsrcdir}') is not mozconfig topsrcdir ('${mozconfig.topsrcdir}')")
    }

    def topobjdir
    if (ext.has('topobjdir')) {
        topobjdir = ext.topobjdir
    } else {
        topobjdir = mozconfig.topobjdir
        log("Found topobjdir ${topobjdir} from topsrcdir ${topsrcdir}")
    }

    if (mozconfig.substs.MOZ_BUILD_APP != 'mobile/android') {
        throw new GradleException("Building with Gradle is only supported for GeckoView, i.e., MOZ_BUILD_APP == 'mobile/android'.")
    }

    return [mozconfig, topobjdir]
}
